{"name":"pdist","tagline":"Ruby gem to compare permutations using distance measures/metrics","body":"pdist\r\n=====\r\n\r\nRuby gem to compare permutations using distance measures/metrics.\r\n\r\nInstall and pre-requisites\r\n----\r\n\r\n```\r\ngem install pdist\r\n```\r\n\r\nOR download [here](http://rubygems.org/gems/pdist)\r\n\r\nYou must also have the [diff-lcs](http://rubygems.org/gems/diff-lcs) gem installed, to use the **longest common subsequence** method (see below).\r\n\r\nUsage\r\n----\r\n\r\nEach method of the PDist class takes as input, two arrays of the same unique objects (i.e. both are the same array ordered differently).\r\n\r\nThe two input arrays are permutations of eachother, and the chosen method calculates the 'distance' between these permutations, according to a certain measure/metric.\r\n\r\n**For example** take these two permutations of the integers 1..5:\r\n\r\n```ruby\r\na = [1,2,3,4,5]\r\nb = [2,1,3,5,4]\r\n```\r\n\r\nEach of the methods below gives as output a float of value x, where **0.0 <= x <= 1.0**\r\n\r\nThis output value is the distance between the permutations as attributed by the metric, normalized in the range **0.0 to 1.0**\r\n\r\nOutput values closer to **0.0** indicate closely matching permutations, where **0.0** is a perfect match, and **1.0** is the maximum possible distance.\r\n\r\n**To get the un-normalized distance for each of these metrics, simply append ``_raw`` to any of the methods below (before the arguments)**\r\n\r\n### Deviation distance\r\n\r\n```ruby\r\nPDist.deviation(a,b)\r\n```\r\n\r\n###Â Square deviation distance\r\n\r\n```ruby\r\nPDist.square(a,b)\r\n```\r\n\r\n### Hamming distance\r\n\r\n```ruby\r\nPDist.hamming(a,b)\r\n```\r\n\r\n### The R distance (reversed)\r\n\r\n```ruby\r\nPDist.rdist(a,b)\r\n```\r\n\r\n### The longest common sub-sequence\r\n\r\n```ruby\r\nPDist.lcs(a,b)\r\n```\r\n\r\n### Kendall's tau\r\n\r\n```ruby\r\nPDist.kendalls_tau(a,b)\r\n```\r\n\r\nMathematical descriptions of methods\r\n----\r\n\r\nEach of the methods in the PDist class is described mathematically by [Sevaux and Kenneth (2005)](http://www.researchgate.net/publication/228565454_Permutation_distance_measures_for_memetic_algorithms_with_population_management/file/d912f50a9de08542ff.pdf)\r\n\r\nThe authors also describe several other distance metrics for permutation comparison. Forkers who wish to implement these methods or others are most welcome.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}